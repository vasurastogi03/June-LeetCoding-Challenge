PROBLEM STATEMENT EXPLANATION
basically this problem is similar to

Shortest path with exactly k edges in a directed and weighted graph

u is treated as a source and v is treated as a destintion

Given a directed and two vertices ‘u’ and ‘v’ in it, find shortest path from ‘u’ to ‘v’ with exactly k edges on the path.
here the source and destination with their respective cost(weight) is given, you have to convert those into a adjacency matrix representation where value of graph[i] [j]. indicates the weight of an edge from vertex i to vertex j and a value INF(infinite) indicates no edge from i to j.

For example consider the following graph. Let source ‘u’ be vertex 0, destination ‘v’ be 3 and k be 2. There are two walks of length 2, the walks are {0, 2, 3} and {0, 1, 3}. The shortest among the two is {0, 2, 3} and weight of path is 3+6 = 9.

A simple solution is to start from u, go to all adjacent vertices and recur for adjacent vertices with k as k-1, source as adjacent vertex and destination as v.

but we can optimise it by using dynamic programming approach.

DP EXPLANATION MEMORY EFFICEINT

Actually Bellman Ford is a space optimized version of 2D Dynamic Programming Solution.

To understand Bellman Ford you need to understand the 2D version first.

dp[v, k] = Shortest path from src to v using atmost k edges

dp[v, k] = {Minimum dist over all u belonging to all vertices which are coming towards v(in the indegree[v])} min(dp[u, k-1] + w(u->v)).
dp[u, k-1] becoz we have to reach to u using atmost k-1 edges. As we have to reach v using atmost k edges.

Similarly dp[u, k-1] = (p belongs to indegree[u]) min(dp[p, k-2] + w(p->u)).

Why doesn't Space optimized version work for atmost K edges case?

Using above example.

The space optimized version will depend on order of visiting the edges.

Suppose the order in which we relax edges is:
0->1
1->2
0->2

So after 1 round of relaxation

Distances will be 0->1 = 100
0->2 = 200
Which is wrong as using atmost 1 edge the distance from 0->2 should be 500.
The 1D version is agnostic to the order in which we visit edges.

Note: K Stops = K + 1 edges
